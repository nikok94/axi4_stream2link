-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\AXIS2LP_convert\axi_stream_to_link.vhd
-- Created: 2018-01-22 11:12:46
-- 
-- Generated by MATLAB 8.6 and HDL Coder 3.7
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- LxDAT                         ce_out        1
-- LCLK                          ce_out        1
-- u_TReady                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_stream_to_link
-- Source Path: AXIS2LP_convert/axi_stream_to_link
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_stream_to_link IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        u_TData                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        u_TValid                          :   IN    std_logic;
        u_TLast                           :   IN    std_logic;
        LACK                              :   IN    std_logic;
        CLKIN                             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        LxDAT                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
        LCLK                              :   OUT   std_logic;
        u_TReady                          :   OUT   std_logic
        );
END axi_stream_to_link;

ARCHITECTURE rtl OF axi_stream_to_link IS

  -- Component Declarations
  COMPONENT Count_NumbByte
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          CLK_1                           :   IN    std_logic;
          En                              :   IN    std_logic;
          NumbByte                        :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Count_NumbByte
    USE ENTITY work.Count_NumbByte(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Count_NumbByte_out1              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Count_NumbByte_out1_unsigned     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL u_TData_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Extract_Bits_out1                : signed(7 DOWNTO 0);  -- int8
  SIGNAL Extract_Bits1_out1               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Extract_Bits2_out1               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Extract_Bits3_out1               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Multiport_Switch_out1            : signed(7 DOWNTO 0);  -- int8
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;

BEGIN
  u_Count_NumbByte : Count_NumbByte
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              CLK_1 => CLKIN,
              En => Logical_Operator_out1,
              NumbByte => Count_NumbByte_out1  -- ufix2
              );

  Logical_Operator_out1 <= u_TValid AND LACK;

  Count_NumbByte_out1_unsigned <= unsigned(Count_NumbByte_out1);

  u_TData_signed <= signed(u_TData);

  Extract_Bits_out1 <= signed(u_TData_signed(31 DOWNTO 24));

  Extract_Bits1_out1 <= signed(u_TData_signed(23 DOWNTO 16));

  Extract_Bits2_out1 <= signed(u_TData_signed(15 DOWNTO 8));

  Extract_Bits3_out1 <= signed(u_TData_signed(7 DOWNTO 0));

  
  Multiport_Switch_out1 <= Extract_Bits_out1 WHEN Count_NumbByte_out1_unsigned = to_unsigned(16#0#, 2) ELSE
      Extract_Bits1_out1 WHEN Count_NumbByte_out1_unsigned = to_unsigned(16#1#, 2) ELSE
      Extract_Bits2_out1 WHEN Count_NumbByte_out1_unsigned = to_unsigned(16#2#, 2) ELSE
      Extract_Bits3_out1;

  LxDAT <= std_logic_vector(Multiport_Switch_out1);

  
  Compare_To_Zero1_out1 <= '1' WHEN Count_NumbByte_out1_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator4_out1 <= u_TValid AND u_TLast;

  Logical_Operator2_out1 <=  NOT u_TLast;

  Logical_Operator3_out1 <= u_TValid AND Logical_Operator2_out1;

  enb <= clk_enable;

  Logical_Operator6_out1 <=  NOT Unit_Delay_out1;

  Logical_Operator7_out1 <= Logical_Operator3_out1 AND Logical_Operator6_out1;

  Logical_Operator5_out1 <= Logical_Operator4_out1 OR Logical_Operator7_out1;

  
  switch_compare_1 <= '1' WHEN Logical_Operator5_out1 > '0' ELSE
      '0';

  
  Switch_out1 <= Unit_Delay_out1 WHEN switch_compare_1 = '0' ELSE
      Logical_Operator6_out1;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Logical_Operator8_out1 <= Compare_To_Zero1_out1 AND Unit_Delay_out1;

  
  switch_compare_1_1 <= '1' WHEN Logical_Operator8_out1 > '0' ELSE
      '0';

  Constant1_out1 <= '0';

  
  Compare_To_Zero2_out1 <= '1' WHEN Count_NumbByte_out1_unsigned > to_unsigned(16#0#, 2) ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Compare_To_Zero2_out1 > '0' ELSE
      '0';

  Constant_out1 <= '1';

  
  Switch1_out1 <= Constant1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant_out1;

  
  Switch2_out1 <= Switch1_out1 WHEN switch_compare_1_2 = '0' ELSE
      CLKIN;

  
  Compare_To_Zero_out1 <= '1' WHEN Count_NumbByte_out1_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator1_out1 <= Compare_To_Zero_out1 OR Logical_Operator_out1;

  ce_out <= clk_enable;

  LCLK <= Switch2_out1;

  u_TReady <= Logical_Operator1_out1;

END rtl;

